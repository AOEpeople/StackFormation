{
  "name": "AWS StackFormation",
  "tagline": "Lightweight AWS CloudFormation Stack Manager",
  "body": "# StackFormation\r\n\r\n**Lightweight AWS CloudFormation Stack, Template and Parameter Manager and Preprocessor**\r\n\r\n<img align=\"right\" style=\"float: right; height: 200px;\" src=\"https://raw.githubusercontent.com/AOEpeople/StackFormation/master/doc/img/stackformation_200px.png\">\r\n\r\n[![Build Status](https://travis-ci.org/AOEpeople/StackFormation.svg?branch=master)](https://travis-ci.org/AOEpeople/StackFormation)\r\n[![Code Climate](https://codeclimate.com/github/AOEpeople/StackFormation/badges/gpa.svg)](https://codeclimate.com/github/AOEpeople/StackFormation)\r\n[![Test Coverage](https://codeclimate.com/github/AOEpeople/StackFormation/badges/coverage.svg)](https://codeclimate.com/github/AOEpeople/StackFormation/coverage)\r\n\r\nAuthor: \r\n - [Fabrizio Branca](https://twitter.com/fbrnc)\r\n\r\nContributors:\r\n - [Lee Saferite](https://github.com/LeeSaferite)\r\n - [Julian Kleinhans](https://github.com/kj187)\r\n - [Daniel Niedergesäß](https://github.com/smart-devs)\r\n \r\n\r\n### Installation\r\n\r\n#### Via composer\r\n\r\n[Install composer](https://getcomposer.org/doc/00-intro.md#installation-linux-unix-osx) first, then:\r\n```\r\ncomposer require aoepeople/stackformation\r\n```\r\n\r\n#### Using the phar\r\n\r\nGrab the latest release from https://github.com/AOEpeople/StackFormation/releases/latest\r\nor use this shortcut (requires `jq` to be installed)\r\n```\r\nwget $(curl -s https://api.github.com/repos/AOEpeople/StackFormation/releases/latest | jq -r '.assets[0].browser_download_url')\r\n```\r\n\r\nIf you want to use stackformation globally:\r\n```\r\nmv stackformation.phar /usr/local/bin/stackformation\r\nchmod +x /usr/local/bin/stackformation\r\n```\r\n\r\n### Quickstart\r\n\r\n#### Setup\r\n\r\nCreate a `.env.default` file (and add it yo your gitignore: `echo .env.default >> .gitignore`)\r\n```\r\nAWS_ACCESS_KEY_ID=INSERT_YOUR_ACCESS_KEY_HERE\r\nAWS_SECRET_ACCESS_KEY=INSERT_YOUR_SECRET_KEY_HERE\r\nAWS_DEFAULT_REGION=INSERT_YOUR_DEFAULT_REGION_HERE\r\n```\r\n\r\n#### Your first blueprint\r\n\r\nCreate a `blueprints.yml` in your current directory:\r\n```\r\nblueprints:\r\n  - stackname: my-stack\r\n    template: my-stack.template\r\n```\r\n\r\nCreate you CloudFormation template `my-stack.template`:\r\n```\r\n{\r\n  \"Resources\": { \r\n    \"MyResource1\": { \"Type\": \"AWS::CloudFormation::WaitConditionHandle\" }\r\n  }\r\n}\r\n```\r\n\r\nDeploy your stack:\r\n```\r\nbin/stackformation.php deploy my-stack\r\n```\r\n\r\n#### Adding parameters\r\n\r\nAdd parameters in your `my-stack.template`:\r\n```\r\n{\r\n  \"Parameters: {\r\n    \"MyParameter1\": { \"Type\": \"String\" }\r\n  },\r\n  \"Resources\": { \r\n    \"MyResource1\": { \"Type\": \"AWS::CloudFormation::WaitConditionHandle\" }\r\n  }\r\n}\r\n```\r\n\r\n...and configure that parameter in the `blueprint.yml` file:\r\n```\r\nblueprints:\r\n  - stackname: my-stack\r\n    template: my-stack.template\r\n    parameters:\r\n      MyParameter1: 'Hello World'\r\n```\r\n\r\n#### Referencing outputs/resources/parameters from other stacks\r\n\r\nTODO\r\n\r\n#### Inject user data\r\n\r\nTODO\r\n\r\n### Structuring your blueprints\r\n\r\nStructure your blueprints including all templates and other files (e.g. userdata) in \"modules\".\r\nStackFormation will load all stack.yml files from following locations:\r\n- `blueprints/*/*/*/blueprints.yml`\r\n- `blueprints/*/*/blueprints.yml`\r\n- `blueprints/*/blueprints.yml`\r\n- `blueprints/blueprints.yml`\r\n- `blueprints.yml`\r\n\r\nSo it's suggested to create a directory structure like this one:\r\n```\r\nblueprints/\r\n  stack1/\r\n    userdata/\r\n      provisioning.sh\r\n    blueprints.yml\r\n    my.template\r\n  stack2/\r\n    blueprints.yml\r\n  ...\r\n```\r\n\r\nAll `blueprints.yml` files will be merged together.\r\n\r\n### Using stack policies\r\n\r\nTo prevent stack resources from being unintentionally updated or deleted during a stack update you can use [stack policies](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/protect-stack-resources.html).\r\nStack policies apply only during stack updates and should be used only as a fail-safe mechanism to prevent accidental \r\nupdates to certain stack resources.\r\n\r\nIt's suggested to create a stack_policies directory below the corresponding stack directory:\r\n```\r\nblueprints/\r\n  stack1/\r\n    stack_policies/\r\n    blueprints.yml\r\n    ...\r\n  stack2/\r\n    stack_policies/\r\n    blueprints.yml\r\n    ...\r\n  ...\r\n```\r\n\r\nYou have to tell StackFormation where it could find the stack policy. \r\n\r\nExample:\r\n```\r\nblueprints:\r\n  - stackname: 'my-stack'\r\n    template: 'templates/my-stack.template'\r\n    stackPolicy: 'stack_policies/my-stack.json'\r\n```\r\n\r\n### Using composer\r\n\r\nYou can pull in StackFormation modules via composer. Look at the [cfn-lambdahelper](https://github.com/AOEpeople/cfn-lambdahelper) \r\nfor an example. A custom composer installer (configured as `require` dependency) will take care of putting all the\r\nmodule files in your `blueprints/` directory. This way you can have project specific and generic modules next to each other.\r\n\r\nPlease note that a \"StackFormation module\" will probably not come with a `blueprints.yml` file since this (and especially the \r\nstack parameter configuration) is project specific. \r\n\r\nYou will need to create the stack configuration for the parts you want to use. A good place would be `blueprints/blueprints.yml` \r\nwhere you reference the imported module.\r\n\r\nExample:\r\n```\r\nblueprints:\r\n  - stackname: 'lambdacfnhelpers-stack'\r\n    template: 'cfn-lambdahelper/lambda_cfn_helpers.template'\r\n    Capabilities: CAPABILITY_IAM\r\n```\r\n\r\n\r\n### Parameter Values\r\n\r\n- Output lookup: `{output:<stack>:<output>}` -> output value\r\n- Resource lookup: `{resource:<stack>:<logicalResource>}` -> physical Id of that resource\r\n- Parameter lookup: `{parameter:<stack>:<logicalResource>}` -> parameter value (note that some parameters will not be shown if they're 'no_echo')\r\n- Environment variable lookup: `{env:<var>}` -> value of environment variable 'var'\r\n- Environment variable lookup with default value fallback: `{env:<var>:<defaultValue>}` -> value of environment variable 'var' falling back to 'defaultValue' if env var is not set\r\n- Stack/global variable lookup: `{var:<var>}` -> value variable 'var'\r\n- Current timestamp: `{tstamp}` -> e.g. '1453151115'\r\n- MD5 sum: `{md5:<filename>}` -> e.g. 'fdd747e9989440289dcfb476c75b4268'\r\n- Clean: `{clean:2.1.7}` -> '217' (removes all characters that aren't allowed in stack names\r\n- Switch profile: `[profile:<profileName>:...]` will switch to a different profile and evaluate the second parameter there. This is useful in cross account setups.\r\n\r\nOutput and resource lookup allow you to \"connect\" stacks to each other by wiring the output or resources created in\r\none stack to the input parameters needed in another stack that sits on top of the first one without manually \r\nmanaging the input values.\r\n\r\nExample\r\n```\r\nblueprints:\r\n  - stackname: stack1-db\r\n    template: templates/stack1.template\r\n    [...]\r\n  - stackname: stack2-app\r\n    template: templates/stack2.template\r\n    parameters:\r\n      build: 's3://{output:stack1:bucketName}/{env:BUILD}/build.tar.gz'\r\n      db: '{output:stack1-db:DatabaseRds}'\r\n```\r\n\r\nVariables (global/local, nested into other placeholders)\r\n```\r\nvars:\r\n  KeyPair: 'mykeypair'\r\n    \r\nblueprints:\r\n  - stackname: mystack\r\n    vars:\r\n      ParentStack: 'MyParentStack'\r\n    parameters:\r\n      KeyPair: '{var:mykeypair}'\r\n      Database: '{output:{var:ParentStack}:DatabaseRds}'\r\n    [...]\r\n```\r\n\r\nSwitch Profile Example (in this example an AMI is baked in a different account and shared with this account)\r\n```\r\nblueprints:\r\n  - stackname: mystack\r\n    parameters:\r\n      BaseAmi: '[profile:myDevAccountProfile:{output:bakestack:BaseAmi}]'\r\n```\r\n\r\n### Conditional parameter values\r\n\r\nYou might end up deploying the same stacks to multiple environments or accounts. Instead of duplicating the blueprints (or using YAML reference) you'll probably\r\nwant to parameterize your blueprints like this \r\n```\r\nblueprints:\r\n  - stackname: 'app-{env:Environment}-build'\r\n    template: 'build.template'\r\n    parameters:\r\n      KeyPair: 'MyKeyPair'\r\n    [...]\r\n```\r\n\r\n... and then before deploying (locally or from your CI server) you'd set the env var first and then deploy:\r\n```\r\nexport Environment=prod\r\nbin/stackformation.php blueprint:deploy 'app-{env:Environment}-build'\r\n```\r\n\r\nBut in many cases those stacks do have some minor differences in some of the parameters (e.g. different VPCs or KeyNames,...)\r\nYou could solve it like this with nested placeholders:\r\n```\r\nblueprints:\r\n  - stackname: 'app-{env:Environment}-build'\r\n    template: 'build.template'\r\n    vars:\r\n      prod-KeyName: MyProdKey\r\n      stage-KeyName: MyStageKey\r\n    parameters:\r\n      KeyPair: '{var:{env:Environment}-KeyName}'\r\n```\r\n\r\nWhile this is perfectly possible this gets very confusing soon. Plus you'll have to mention every variation of the variable explicitely.\r\n \r\nInstead you can use a conditional value:\r\n```\r\nblueprints:\r\n  - stackname: 'app-{env:Environment}-build'\r\n    template: 'build.template'\r\n    parameters:\r\n      KeyPair: \r\n        '{env:Environment}==prod': MyProdKey\r\n        '{env:Environment}==stage': MyStageKey\r\n        '{env:Environment}~=/^dev[0-9]+$/': MyDevKey\r\n        'default': MyDevKey\r\n```\r\n\r\nStackFormation will evaluate all keys from top to bottom and the first key that evaluates to true will be returned. \r\nAllowed conditions:\r\n- `A==B`\r\n- `A!=B`\r\n- `A~=/^regex$/`\r\n- 'default' (will always evaluate to true. Make sure you put this at the very end since everything after this will be ignored).\r\nPlaceholders will be resolved before the conditions are evaluated.\r\n\r\n\r\n### Wildcards\r\n\r\nWhen referencing a stack in `{output:<stack>:<output>}`, `{resource:<stack>:<logicalResource>}`, or `{parameter:<stack>:<logicalResource>}` you can use a wildcard\r\nto specify a stack. In this case StackFormation looks up all live stacks and finds a stack matching the pattern. If there's no stack or more than a single stack \r\nmatching the pattern StackFormation will throw an exception.\r\nThis feature is helpful when you know there's always only a single stack of one type that has a placeholder in it's stackname:\r\n\r\nExample: \r\nStackname: `deployment-{env:BUILD_NUMBER}`\r\nIn blueprints.yml: \r\n```\r\nblueprints:\r\n  - stackname: mystack\r\n    parameters:\r\n      Elb: '{output:deployment-*:Elb}'\r\n```\r\n\r\n### Effective stackname\r\n\r\nYou can include environment variable in your stackname (which is very handy for automation via Jenkins).\r\nIn this case your effective stackname (e.g. `build-5`) will be different from the configured stackname (e.g. `build-{env:BUILD_NUMBER}`)\r\n\r\nExample\r\n```\r\nblueprints:\r\n  - stackname: 'build-{env:BUILD_NUMBER}'\r\n    template: templates/deploy_build.template\r\n```\r\n\r\n### Relative file paths\r\n\r\nPlease note that all files paths in the `template` section of a `blueprints.yml` are relative to the current `blueprints.yml` file\r\nand all files included via `Fn::FileContent`/ `Fn:FileContentTrimLines` or `Fn:FileContentMinify` are relative to the \r\nCloudFormation template file.\r\n\r\nExample:\r\n```\r\nblueprints/\r\n  stack1/\r\n    userdata/\r\n      provisioning.sh\r\n    blueprints.yml\r\n    my.template\r\n```\r\n\r\nblueprints.yml:\r\n```\r\nblueprints:\r\n  - stackname: test\r\n    template: my.template\r\n```\r\n\r\nmy.template\r\n```\r\n{ [...]\r\n  \"Ec2Instance\": {\r\n    \"Type\": \"AWS::AutoScaling::LaunchConfiguration\",\r\n    \"Properties\": {\r\n      \"UserData\": {\"Fn::Base64\": {\"Fn::FileContent\": \"userdata/provisioning.sh\"}}\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n### Template merging\r\n\r\nStackFormation allows you to configure more than one template:\r\n\r\n```\r\nblueprints:\r\n  - stackname: iam\r\n    template:\r\n      - iam_role_jenkins.template\r\n      - iam_user_inspector.template\r\n    description: 'IAM users and roles'\r\n```\r\n\r\nThe template files cannot have duplicate keys in any of the top level attributes. StackFormation will then merge them into \r\na single CloudFormation template and deploy this one instead. This feature helps you to structure your template logically\r\nwithout having to deploy and manage them separatly. Also with this you can choose which template to include in case you're\r\npulling in a StackFormation module like https://github.com/AOEpeople/cfn-lambdahelper.\r\n\r\nYou can always inspect the final merged and preprocessed template:\r\n```\r\nbin/stackformation.php stack:template iam\r\n```\r\n\r\n### Prefixed template merging\r\n\r\nIf you list your templates with attributes instead of a plain list, the attribute keys will be used to prefix every element of that template.\r\nThis way you can you the same template with different input parameters instead of duplicating resources. This comes in handy for VPC setups.\r\n\r\n```\r\nblueprints:\r\n  - stackname: vpc-subnets\r\n    template:\r\n      ZoneA: az.template\r\n      ZoneB: az.template\r\n    parameters:\r\n      ZoneAVpc: MyVPC\r\n      ZoneAPublicSubnetCidrBlock: '10.0.0.0/24'\r\n      ZoneAPrivateSubnetCidrBlock: '10.0.10.0/24'\r\n      ZoneAAZ: 'eu-west-1a'\r\n      ZoneBVpc: MyVPC\r\n      ZoneBAPublicSubnetCidrBlock: '10.0.1.0/24'\r\n      ZoneBPrivateSubnetCidrBlock: '10.0.11.0/24'\r\n      ZoneBAZ: 'eu-west-1b'\r\n      [...]\r\n```\r\n\r\nIf you have a parameter that needs to be passed to all templates you can prefix it with '*' (make sure you add quotes around that key \r\nsince JSON will consider this a reference instead) and StackFormation will replace '*' with each prefix used in the `template:` section.\r\n\r\n```\r\nblueprints:\r\n  - stackname: vpc-subnets\r\n    template:\r\n      ZoneA: az.template\r\n      ZoneB: az.template\r\n    parameters:\r\n      '*Vpc': MyVPC # Will automatically be expanded to 'ZoneAVpc: MyVPC' and 'ZoneBVpc: MyVPC'\r\n      '*Igw': MyInternetGateway\r\n      ZoneAPublicSubnetCidrBlock: '10.0.0.0/24'\r\n      ZoneAPrivateSubnetCidrBlock: '10.0.10.0/24'\r\n      ZoneAAZ: 'eu-west-1a'\r\n      ZoneBVpc: MyVPC\r\n      ZoneBAPublicSubnetCidrBlock: '10.0.1.0/24'\r\n      ZoneBPrivateSubnetCidrBlock: '10.0.11.0/24'\r\n      ZoneBAZ: 'eu-west-1b'\r\n      [...]\r\n```\r\n\r\n### `before`\r\n\r\nYou can run shell commands before the CloudFormation is being deployed.\r\nThe commands will be executed in the directory where the blueprints.yml file lives. \r\n\r\nExample:\r\n```\r\nblueprints:\r\n  - stackname: 'my-lambda-function'\r\n    template: lambda.template\r\n    Capabilities: CAPABILITY_IAM\r\n    before:\r\n    - cd function \r\n    - npm install aws-sdk\r\n    - zip -r nat_gateway.zip nat_gateway.js node_modules/\r\n    - aws s3 cp nat_gateway.zip s3://mybucket/lambda/nat_gateway.zip\r\n```    \r\n\r\nand you can even use placeholders:\r\n```\r\nblueprints:\r\n  - stackname: 'my-lambda-function'\r\n    template: lambda.template\r\n    Capabilities: CAPABILITY_IAM\r\n    vars:\r\n      bucket: mybucket\r\n      key: 'lambda/nat_gateway.zip'\r\n    parameters:\r\n      # these are the input parameters passed to the cfn template that match the upload location in the custom script below\r\n      S3Bucket: '{var:bucket}'\r\n      S3Key: '{var:key}'\r\n    before:\r\n    - cd function\r\n    - npm install aws-sdk\r\n    - zip -r nat_gateway.zip nat_gateway.js node_modules/\r\n    - aws s3 cp nat_gateway.zip s3://{var:bucket}/{var:key}\r\n\r\n```\r\n\r\n### `after`\r\n\r\nSimilar to `before` scripts you can define scripts that are being executed after the stack has been deployed.\r\nPlease note this only work if you're 'observing' the deploying (no if you deployed with '--no-observe' or if you're \r\nstopping the process (e.g. CTRL+C) during the deployment.\r\n\r\nThe `after` configuration equals the `before` configuration with the addition that you have access to the status in the `${STATUS}` variable/\r\n(Special status values in addition to the default ones like 'CREATE_COMPLETE',...\r\nare 'NO_UPDATES_PERFORMED' and 'STACK_GONE')\r\n\r\nExample\r\n```\r\nblueprints:\r\n  - stackname: 'my-static-website'\r\n    description: 'Static website hosted in S3'\r\n    template: 'website.template'\r\n    after:\r\n      - 'if [[ $STATUS =~ ^(UPDATE|CREATE)_COMPLETE|NO_UPDATES_PERFORMED$ ]] ; then aws s3 sync --delete content/ s3://www-tst.aoeplay.net/; fi'\r\n```\r\n\r\n### `before` and `after`\r\n\r\n`before` or `after` are being executed in the base directory of the current blueprint (that's the directory the blueprint's blueprint.yml file is located at).\r\nBut you can switch directories in your script. The `${CWD}` variable holds the current working directory (the project root) in case you want to switch to that.\r\n\r\nWhen a profile is being used (even if the profile is loaded via the `profiles.yml` file) the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` variables will be \r\nset in the script context, so you can safely call the aws cli tool in the same context the blueprint is being deployed.\r\n\r\nIn addition to that `${BLUEPRINT}` will hold the current blueprint's name and `${STACKNAME}` the current resulting stack name \r\nAlso `${STATUS}` will hold the last status of the stack that has just been deployed (`after` scripts only).\r\n\r\nYou can separate the script lines in an array (that will then be concatenated with `\\n` before executing:\r\n```\r\nblueprints:\r\n  - stackname: 'my-static-website'\r\n    [...]\r\n    after:\r\n      - 'echo \"Line 1\"'\r\n      - 'echo \"Line 2\"'\r\n```\r\n\r\nor you can use the YAML multiline notation:\r\n```\r\nblueprints:\r\n  - stackname: 'my-static-website'\r\n    [...]\r\n    after: |\r\n      echo \"Line 1\"\r\n      echo \"Line 2\"\r\n```\r\n### AWS SDK\r\n\r\nStackFormation uses the AWS SDK for PHP. You should configure your keys in env vars:\r\n```\r\nexport AWS_ACCESS_KEY_ID=INSERT_YOUR_ACCESS_KEY\r\nexport AWS_SECRET_ACCESS_KEY=INSERT_YOUR_PRIVATE_KEY\r\nexport AWS_DEFAULT_REGION=eu-west-1\r\n```\r\n\r\n### Function `Fn::FileContent`\r\n\r\nBefore uploading CloudFormation template to the API there's some pre-processing going on:\r\nI've introduced a new function \"FileContent\" that accepts a path to a file. This file will be read, converted into JSON (using `Fn::Join`).\r\nThe path is relative to the path of the current CloudFormation template file.\r\n\r\nUsage Example:\r\n```\r\n    [...]\r\n    \"UserData\": {\"Fn::Base64\": {\"Fn::FileContent\":\"../scripts/setup.sh\"}},\r\n    [...]\r\n```\r\n\r\n### Functions `Fn::FileContentTrimLines` and `Fn::FileContentMinify`\r\n\r\nThese functions are similar to `Fn::FileContent` but additional they trim whitespace or minify the code.\r\nThis comes in handy when deploying Lambda function where the content can't be larger than 2048kb if you \r\nwant to directly embed the source code via CloudFormation (instead of deploying a zip file).\r\n\r\n### Function `Fn::FileContentUnpretty` \r\n\r\nThis function is the same as `Fn::FileContent` expect it will return the resulting JSON without formatting it, \r\nwhich will reduce the file size significantly due to the missing whitespace in the JSON structure (not inside the file content!)\r\nThis is useful if you're seeing the \"...at 'templateBody' failed to satisfy constraint: Member must have length less than or equal to 51200\" error message.\r\n\r\n### Function `Fn::Split`\r\n\r\nSometime you have a dynamic number of array items. `Fn::Split` allows you to configure them as a single string and transforms them into an array:\r\n\r\n```\r\n\"Aliases\": { \"Fn::Split\": [\",\", \"www.example.com,cdn.example.com\"]}\r\n```\r\nresults in:\r\n```\r\n\"Aliases\": [\"www.example.com\",\"cdn.example.com\"]\r\n```\r\n\r\n### Inject Parameters\r\n\r\nThe scripts (included via `Fn::FileContent`) may contain references to other CloudFormation resources or parameters. \r\nPart of the pre-processing is to convert snippets like `{Ref:MagentoWaitConditionHandle}` or `{Ref:AWS::Region}` or `{Fn::GetAtt:[resource,attribute]}` (note the missing quotes!)\r\ninto correct JSON snippets and embed them into the `Fn::Join` array.\r\n\r\nUsage Example:\r\n```\r\n#!/usr/bin/env bash\r\n/usr/local/bin/cfn-signal --exit-code $? '{Ref:WaitConditionHandle}'\r\n```\r\nwill be converted to:\r\n```\r\n{\"Fn::Join\": [\"\", [\r\n\"#!\\/usr\\/bin\\/env bash\\n\",\r\n\"\\/usr\\/local\\/bin\\/cfn-signal --exit-code $? '\", {\"Ref\": \"WaitConditionHandle\"}, \"'\"\r\n]]}\r\n```\r\n\r\nUsage Example:\r\n```\r\n#!/usr/bin/env bash\r\nEIP=\"{Fn::GetAtt:[NatIp,AllocationId]}\"\r\n```\r\nwill be converted to:\r\n```\r\n{\"Fn::Join\": [\"\", [\r\n\"#!\\/usr\\/bin\\/env bash\\n\",\r\n\"EIP=\\\"\",\r\n{\r\n    \"Fn::GetAtt\": [\r\n        \"NatIp\",\r\n        \"AllocationId\"\r\n    ]\r\n},\r\n\"\\\"\\n\",\r\n]]}\r\n```\r\n\r\n### Include file content\r\n\r\nYou can include content from a different file into a script. Use this is you have duplicate code that you need to embed into multiple \r\nresource's UserData:\r\n\r\nExample:\r\n```\r\n#!/usr/bin/env bash\r\n\r\n###INCLUDE:../generic/includes/base.sh\r\n\r\n[...]\r\n```\r\n\r\n### Inject raw JSON\r\n\r\n```\r\n###JSON###\r\n{ \"hello\": \"world\" }\r\n######\r\n```\r\n\r\n### Stackname filter\r\n\r\nYou can configure a regular expression in the `STACKFORMATION_NAME_FILTER` environment variable (e.g. via `.env.default`) which\r\nwill filter all your stack lists to the stacks matching this pattern. This is useful if you have a naming convention in place and\r\nyou don't want to see other team's stacks in your list.\r\n\r\nExample:\r\n```\r\nSTACKFORMATION_NAME_FILTER=/^myproject-(a|b)-/\r\n```\r\n\r\n### Comments\r\n\r\nYou can add comments to your JSON file. Due to a current bug you can't have double quotes in your comment block.\r\n\r\nExample:\r\n```\r\n{\"IpProtocol\": \"tcp\", \"FromPort\": \"80\", \"ToPort\": \"80\", \"CidrIp\": \"1.2.3.4/32\"}, /* AOE WI Office */\r\n{\"IpProtocol\": \"tcp\", \"FromPort\": \"80\", \"ToPort\": \"80\", \"CidrIp\": \"5.6.7.8/32\"}, /* Fabrizio Home Office */\r\n```\r\n\r\n### Port\r\n\r\n`\"Port\":\"...\"` will automatically expanded to `\"FromPort\": \"...\", \"ToPort\": \"...\"`. So if you're specifying a single\r\nport instead of a range of ports you can reduce the redundancy:\r\n\r\nExample:\r\n```\r\n{\"IpProtocol\": \"tcp\", \"Port\": \"80\", \"CidrIp\": \"1.2.3.4/32\"}, \r\n/* expands to: */\r\n{\"IpProtocol\": \"tcp\", \"FromPort\": \"80\", \"ToPort\": \"80\", \"CidrIp\": \"1.2.3.4/32\"},\r\n```\r\n\r\n### Expand strings with {Ref:...}\r\n\r\nTired of concatenating strings with `{\"Fn::Join\": [\"\", [` manually? Just add the references in a string and StackFormation will\r\nexpand this for you:\r\n\r\nExample:\r\n```\r\n\"Key\": \"Name\", \"Value\": \"magento-{Ref:Environment}-{Ref:Build}-instance\"\r\n/* will be replaced with: */\r\n\"Key\": \"Name\", \"Value\": {\"Fn::Join\": [\"\", [\"magento-\", {\"Ref\":\"Environment\"}, \"-\", {\"Ref\":\"Build\"}, \"-instance\"]]}\r\n```\r\n\r\n### Reverse blueprint match\r\n\r\nLet's say you have a blueprint `ecom-{env:ACCOUNT}-{env:ENVIRONMENT}-static-stack` and you want to deploy it with ACCOUNT=t and ENVIRONMENT=dpl.\r\nYou would do this by setting the env vars ACCOUNT and ENVIRONMENT and then run the deploy command:\r\n\r\n```\r\nexport ACCOUNT=t\r\nexport ENVIRONMENT=dpl\r\nbin/stackformation.php deploy 'ecom-{env:ACCOUNT}-{env:ENVIRONMENT}-static-stack'\r\n```\r\n\r\nBut instead you can also simply run the deploy command with the resulting stack name `ecom-t-tst-static-stack`\r\nStackFormation will then attempt to find a matching tag, determine which environments need to be set and\r\nrun the original blueprint for you:\r\n\r\n```\r\nbin/stackformation.php deploy 'ecom-t-tst-static-stack'\r\nBlueprint reverse match found: ecom-{env:ACCOUNT}-{env:ENVIRONMENT}-static-stack\r\nWith ENV vars: ACCOUNT=t; ENVIRONMENT=tst\r\nUse this blueprint and set env vars? [y/N] y\r\nSetting env var: ACCOUNT=t\r\nSetting env var: ENVIRONMENT=tst\r\n...\r\n```\r\n\r\n### Misc\r\n\r\nUse the `jq` tool to create a simple list of all parameters (almost) ready to paste it in the blueprints.yml\r\n\r\n```\r\ncat my.template | jq '.Parameters | keys' | sed 's/\",/: \\'\\'/g' | sed 's/\"//g'\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}